name: Build packager Docker image
# This workflow is triggered on pushes to the repository.
on: 
  push:

env:
  DOCKER_BRANCH_RELEASE_PATTERN: 'release/*[0-9].*[0-9].*[0-9]' 
  DOCKER_BRANCH_DEVELOP_PATTERN: 'develop' 
  DOCKER_BRANCH_FEATURE_PATTERN: 'feature/.*' 
  DOCKER_TAG_PATTERNS: '.*'
  REGISTRY_URL: nexus.texel.live
  RELEASE_PORT: 5000  
  DEVELOP_PORT: 5002
  TRIVY_USERNAME: ${{ secrets.DOCKER_USER }}
  TRIVY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  Linting:    
    runs-on: ubuntu-latest
    name: pipeline
    steps:
      - name: check-out
        uses: actions/checkout@v2
        id: checkout

      # Run pylint
      - name: pylnt-action
        uses: fylein/python-pylint-github-action@v1
        with:
          args: "pip3 install -r requirements.txt && pylint Texel/ --msg-template='{line:4d},{column:3d}: {msg} ({symbol}) [{category}]' --output-format=colorized --exit-zero | tee summary.txt"

      # Determine number of errors
      - name: Count linting errros
        id: error-cnt
        run: echo "::set-output name=linting_errors::$(cat summary.txt | grep -c '31merror')"

      # Stop workflow if there is a non zero amount of errors as a result of pylint
      - name: Exit if pylint had errors
        if: ${{ steps.error-cnt.outputs.linting_errors != 0}}
        run: echo "::error ::Linting discovered that there are ${{ steps.error-cnt.outputs.linting_errors }} errors in the project!" && exit ${{ steps.error-cnt.outputs.linting_errors }}

  Match-ref-patterns:
    runs-on: ubuntu-latest
    outputs:
      pattern-matched: ${{ steps.matching.outputs.pattern-matched }}
      registry: ${{ steps.matching.outputs.registry }}
      ref: ${{ steps.matching.outputs.ref }}
    steps:
      - uses: actions/checkout@v2
      - id: foo
        uses: actions/composite-match-ref-patterns@v1

  Docker-builds:
    needs: [Linting, Match-ref-patterns]
    runs-on: ubuntu-latest
    steps:
      # Checkout repo
      - name: check-out
        uses: actions/checkout@v2
        id: checkout

      #Login to registry that will hold the image
      - name: Login to docker-texel
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY_URL }}:${{ env.DEVELOP_PORT }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to docker-release
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY_URL }}:${{ env.RELEASE_PORT }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      # Step to prep all docker related things before push
      - name: Docker prep
        id: docker-prep
        run: |
          NEXUS_REPOSITORY=packager
          BASE_TAG=${{ needs.Match-ref-patterns.outputs.registry }}/$NEXUS_REPOSITORY
          TAGS="$BASE_TAG:${{ needs.Match-ref-patterns.outputs.ref }},$BASE_TAG:sha-${GITHUB_SHA:0:7}"
          echo ::set-output name=tags::${TAGS}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Build and push image for Dockerfile
      - name: Build and push image for Dockerfile
        uses: docker/build-push-action@v2
        with:
          file: ./Dockerfile
          context: ./
          push: ${{ needs.Match-ref-patterns.outputs.pattern-matched == 'true'}}
          tags: ${{ needs.Match-ref-patterns.outputs.registry }}/packager:${{ needs.Match-ref-patterns.outputs.ref }}

      # Display the tags of the docker image if one pushed
      - name: Show docker tag for Dockerfile
        if: ${{ needs.Match-ref-patterns.outputs.pattern-matched == 'true'}}
        run: |
          echo Docker image was built and pushed with the following tags:
          IFS=',' read -ra arr <<< ${{ steps.docker-prep.outputs.tags }}
          for pattern in ${arr[@]}; do
            echo $pattern
          done
    
      - name: Run vulnerability scanner for Dockerfile
        if: ${{ needs.Match-ref-patterns.outputs.pattern-matched == 'true'}}
        uses: aquasecurity/trivy-action@0.0.7
        with:
          image-ref: ${{ needs.Match-ref-patterns.outputs.registry }}/packager:${{ needs.Match-ref-patterns.outputs.ref }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      # Build and push image for Dockerfile.vo
      - name: Build and push image for Dockerfile.vo
        uses: docker/build-push-action@v2
        with:
          file: ./Dockerfile.vo
          context: ./
          push: ${{ needs.Match-ref-patterns.outputs.pattern-matched == 'true'}}
          tags: ${{ needs.Match-ref-patterns.outputs.registry }}/cms:${{ needs.Match-ref-patterns.outputs.ref }}

      # Display the tags of the docker image if one pushed
      - name: Show docker tag for Dockerfile.vo
        if: ${{ needs.Match-ref-patterns.outputs.pattern-matched == 'true'}}
        run: |
          echo Docker image was built and pushed with the following tags:
          IFS=',' read -ra arr <<< ${{ steps.docker-prep.outputs.tags }}
          for pattern in ${arr[@]}; do
            echo $pattern
          done
    
      - name: Run vulnerability scanner for Dockerfile.vo
        if: ${{ needs.Match-ref-patterns.outputs.pattern-matched == 'true'}}
        uses: aquasecurity/trivy-action@0.0.7
        with:
          image-ref: ${{ needs.Match-ref-patterns.outputs.registry }}/cms:${{ needs.Match-ref-patterns.outputs.ref }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
